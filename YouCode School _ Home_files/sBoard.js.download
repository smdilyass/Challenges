var sBoard_array    = [];
var sBoard_timer;
var sBoard_todo_counter    = 0;
var sBoard_doing_counter   = 0;
var sBoard_done_counter    = 0;
var sBoard_backup_items = [];

var cpt             = 0;

function sBoardReset()
{
    sBoard_todo_counter    = 0;
    sBoard_doing_counter   = 0;
    sBoard_done_counter    = 0;
    $("#scrum-board-todo-container").empty();
    $("#scrum-board-doing-container").empty();
    $("#scrum-board-done-container").empty();
    $("#scrum-board-todo-count").text(0);
    $("#scrum-board-doing-count").text(0);
    $("#scrum-board-done-count").text(0);
}

function sBoardGet(url)
{
    sBoardStopCountDown();
    startReloadPanel('#scrum-board-todo-panel');
    startReloadPanel('#scrum-board-doing-panel');
    startReloadPanel('#scrum-board-done-panel');
    $.ajax({
        url: url,
        type: 'GET',
        success: function(result,status) {
            sBoard_array = JSON.parse(result);
            sBoardCalculateTime();
            //sBoardDrawData();
            if(sBoard_array.length > 0) sBoardStartCountDown();
            else                        sBoardDrawData()
            //console.log(sBoard_array);
        },
        error: function(result,status,error) {

        },
        complete: function(result) {
            stopReloadPanel('#scrum-board-todo-panel');
            stopReloadPanel('#scrum-board-doing-panel');
            stopReloadPanel('#scrum-board-done-panel');
        }
    });
}

function sBoardCalculateTime()
{
    
    let datetime_now        =   new Date();
    let datetime_start      =   new Date();
    let datetime_end        =   new Date();
    let distance_start      =   0;
    let distance_end        =   0;

    let sBoard_todo_counter_new    = 0;
    let sBoard_doing_counter_new   = 0;
    let sBoard_done_counter_new    = 0;

    for(let i = 0; i < sBoard_array.length; i++)
    {
        datetime_start  =   new Date(sBoard_array[i].datetime);
        datetime_end    =   moment(datetime_start).add(sBoard_array[i].duration_minutes, 'm').toDate();
        distance_start  =   datetime_start - datetime_now;
        distance_end    =   datetime_end   - datetime_now;
        if(sBoard_array[i]['todolist_status'] != 'done')
        {
            
            if(distance_start < 0)
            {
                if(distance_end > 0)
                {
                    //Doing
                    sBoard_array[i]['todolist_status']  = 'doing';
                    sBoard_array[i]['distance']  = '<code class=" bg-lime-100 text-green-900"><i class="far fa-clock"></i> '+sBoardCalculateDuration(distance_end)+'</code>';
                    $('.sBoard-item-status-'+sBoard_array[i].id).html(sBoard_array[i]['distance']);
                    sBoard_doing_counter_new++;
                }
                else
                {
                    //Done
                    sBoard_array[i]['todolist_status']  = 'done';
                    sBoard_array[i]['distance']         = '<code class="text-gray-700 bg-gray-100 border"><i class="far fa-clock"></i> Finished</code>';
                    $('.sBoard-item-status-'+sBoard_array[i].id).html(sBoard_array[i]['distance']);
                    sBoard_done_counter_new++;
                }
            }
            else
            {
                //Todo
                sBoard_array[i]['todolist_status']  = 'todo';
                sBoard_array[i]['distance']         = '<code class=""><i class="far fa-clock"></i> '+sBoardCalculateDuration(distance_start)+'</code>';
                $('.sBoard-item-status-'+sBoard_array[i].id).html(sBoard_array[i]['distance']);
                sBoard_todo_counter_new++;
            }
        }
        else if(sBoard_array[i]['todolist_status'] == 'done')
        {
            sBoard_done_counter_new++;
        }
        
    }
    // console.log('Todo: '+sBoard_todo_counter+' '+sBoard_todo_counter_new)
    // console.log('Doing: '+sBoard_doing_counter+' '+sBoard_doing_counter_new)
    // console.log('Done: '+sBoard_done_counter+' '+sBoard_done_counter_new)
    if(sBoard_todo_counter_new != sBoard_todo_counter || sBoard_doing_counter_new != sBoard_doing_counter || sBoard_done_counter_new != sBoard_done_counter)
    {
        //console.log('ReloaaadX');
        sBoardDrawData();
    }
}

function sBoardCalculateDuration(distance)
{
    var _second = 1000;
    var _minute = _second * 60;
    var _hour   = _minute * 60;
    var _day    = _hour * 24;
    var days    = Math.floor(distance / _day);
    var hours   = Math.floor((distance % _day) / _hour);
    var minutes = Math.floor((distance % _hour) / _minute);
    var seconds = Math.floor((distance % _minute) / _second);
    return ((days > 0) ? days + ((days == 1) ? ' day ' : ' days ') : '' ) + padLeadingZeros(hours,2) + ':' +padLeadingZeros(minutes,2) + ':' +padLeadingZeros(seconds,2);
}

function sBoardDrawData()
{
    sBoardReset();
    let todo_array = []
    for(let i = 0; i < sBoard_array.length; i++)
    {
        if(sBoard_array[i]['todolist_status'] == 'todo')
        {
            sBoard_todo_counter++;
            todo_array.push(sBoard_array[i]);
        }    
        if(sBoard_array[i]['todolist_status'] == 'doing')
        {
            sBoard_doing_counter++;
            sBoardDrawItem(sBoard_array[i]);
        }   
        if(sBoard_array[i]['todolist_status'] == 'done')
        {
            sBoard_done_counter++;
            sBoardDrawItem(sBoard_array[i]);
            
        }    
    }

    todo_array.reverse();
    for(let i = 0; i < todo_array.length; i++)
    {
        sBoardDrawItem(todo_array[i]);
    }
    $("#scrum-board-todo-count").text(sBoard_todo_counter);
    $("#scrum-board-doing-count").text(sBoard_doing_counter);
    $("#scrum-board-done-count").text(sBoard_done_counter);

    if(sBoard_todo_counter == 0)
        $("#scrum-board-todo-container").html(`
            <div class="list-group-item list-group-item-action d-flex mt-2 mb-2">
                <div class="text-gray-500 flex-1">
                    <ul class="m-0">
                        <li>Solve problems</i>
                        <li>Documentation</i>
                        <li>Help others</i>
                        <li>Positive vibes</i>
                    </ul>
                </div>
            </div>
        `);
    if(sBoard_doing_counter == 0)
        $("#scrum-board-doing-container").html(`
            <div class="list-group-item list-group-item-action d-flex mt-2 mb-2">
                <div class="text-gray-500 flex-1"><i class="fa fa-left-long"></i> <i>Start working on this</i></div>
            </div>
        `);
    if(sBoard_done_counter == 0)
        $("#scrum-board-done-container").html(`
            <div class="list-group-item list-group-item-action d-flex mt-2 mb-2">
                <div class="text-gray-500 flex-1"><i class="fa fa-left-long"></i> <i>Finish this</i></div>
            </div>
        `);
}

function sBoardUpdateData()
{
    // console.log(cpt);
    // cpt++;
    sBoardCalculateTime();
    
}

function sBoardStartCountDown()
{
    sBoard_timer = setInterval(sBoardUpdateData, 1000);
}

function sBoardStopCountDown()
{
    clearInterval(sBoard_timer);
}

function sBoardDrawItem(activity)
{
    $("#scrum-board-"+activity.todolist_status+"-container").append(`
        <button onclick="sBoardGetItem(`+activity.assignment.id+`)" class="list-group-item list-group-item-action d-flex">
            <div class="me-3 fs-16px">
                <i class="far  `+((activity.todolist_status == 'todo') ? 'fa-question-circle text-gray-500' : ((activity.todolist_status == 'doing') ? 'fas fa-spinner fa-pulse text-gray-500' : 'fa-check-circle text-success'))+` fa-fw"></i> 
            </div>
            <div class="flex-fill">
                <div class="fs-14px lh-12 mb-2px mt-1 fw-bold text-dark d-flex">
                    <div class="badge bg-dark me-1 d-flex align-items-center">`+activity.type.name+`</div> <span>`+activity.subject+`</span>
                    </div>
                
                <div class="fs-12px mb-1">
                    <div class="text-gray-600 flex-1 text-truncate w-300px">#`+activity.assignment.id+` assigned `+activity.assignment.created_at_human+` by `+activity.assignment.created_by+`</div>
                </div>
                <div class="mb-1 fs-12px">
                    <div class="text-dark flex-1"><i class="far fa-square-check me-1"></i> `+datetimeFormat(activity.datetime)+`</div>
                    <div class="text-dark flex-1"><i class="far fa-square-check me-1"></i> `+((activity.duration_minutes) ? durationFormat(activity.duration_minutes) : '<i>Undefined duration</i>')+`</div>
                    <div class="text-dark flex-1"><i class="far fa-square-check me-1"></i> `+activity.assignment_type.work_rule+`</div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center">
                    <div class="ms-3 d-flex align-items-center" id="sBoard-item-coworkers-`+activity.id+`">`+getClassmates(activity)+`</div>
                    <div class="sBoard-item-status-`+activity.id+`">`+activity.distance+`</div>
                </div>
            </div>
        </button>
    `);
}

function getClassmates(activity)
{
    let html = '';
    if(activity.assignments)
    {
        //html = '<span class="me-2 text-gray-600">with</span> ';
        for (let classroom_activity_assignment of activity.assignments)
        {

            html += '<a href="/profile/'+classroom_activity_assignment.learner.username+'" title="'+classroom_activity_assignment.learner.first_name+' '+classroom_activity_assignment.learner.last_name+'" class="widget-img rounded-circle bg-dark me-n2 border" style="width: 25px; height: 25px; background-image: url('+$('meta[name="image-user"]').attr('content')+'thumbnail/'+((classroom_activity_assignment.learner.photo) ? classroom_activity_assignment.learner.photo : '0.jpg')+')"></a>';
        }
    }
    return html;
}

function sBoardGetItem(id)
{
    if(sBoard_backup_items[id]!== undefined)
    {
        sBoardSetItem(sBoard_backup_items[id]);
        return;
    }
    startReloadPanel('#scrum-board-todo-panel');
    startReloadPanel('#scrum-board-doing-panel');
    startReloadPanel('#scrum-board-done-panel');
    $.ajax({
        url: '/profile/assignment/'+id,
        type: 'GET',
        success: function(result,status) {
            let activity = JSON.parse(result);
            sBoardSetItem(activity);
            sBoard_backup_items[id] = activity;
        },
        error: function(result,status,error) {
        },
        complete: function(result) {
            stopReloadPanel('#scrum-board-todo-panel');
            stopReloadPanel('#scrum-board-doing-panel');
            stopReloadPanel('#scrum-board-done-panel');
        }
    });
}

function sBoardSetItem(activity)
{
    $(".modal-assignment-title").html('<span class="badge bg-yellow text-inverse">'+activity.type.name+'</span> '+activity.subject);
    $(".modal-assignment-type").text(activity.type.name);
    $(".modal-assignment-datetime").text(datetimeFormat(activity.datetime));
    $(".modal-assignment-duration").html((activity.duration_minutes) ? durationFormat(activity.duration_minutes) : '<i>None</i>');
    $(".modal-assignment-work").text(activity.assignment_type.work_rule);
    $(".modal-assignment-work-icon").html('<i class="fa fa-fw fa-'+activity.assignment_type.work_rule_icon+' fa-lg"></i>');
    $(".modal-assignment-status").html('<div class="sBoard-item-status-'+activity.id+'"><code class="text-gray-700 bg-gray-100 border"><i class="far fa-clock"></i> Finished</code></div>');
    if(activity.assignment_type.id == 3 || activity.assignment_type.id == 4)
    {
        $(".modal-assignment-coworkers-icon").html('<i class="fa fa-fw fa-handshake fa-lg"></i>');
        $(".modal-assignment-coworkers").html($("#sBoard-item-coworkers-"+activity.id).html());
    }else
    {
        $(".modal-assignment-coworkers-icon").html('<i class="fa fa-fw fa-hand-fist fa-lg"></i>');
        $(".modal-assignment-coworkers").html('Yourself');
    }

    if(activity.resource)
    {
        $(".modal-assignment-resource").html(`
            <div style="width: 150px; white-space: nowrap; overflow: hidden;text-overflow: ellipsis;"><a href="`+activity.resource+`" title="`+activity.resource+`" target="_blank">`+activity.resource+`</a></div>
        `);
    }
    else $(".modal-assignment-resource").html('<i class="text-gray-600 fs-10px">None</i>');
    
    if(activity.description)
    {
        $(".modal-assignment-description").html(activity.description);
    }
    else
    {
        $(".modal-assignment-description").html(`
            <div class="alert alert-primary alert-dismissible fade show">
                This activity has no description!
            </div>
        `);
        if(activity.resource)
        {
            $(".modal-assignment-resource").html(`
                <div style="width: 150px; white-space: nowrap; overflow: hidden;text-overflow: ellipsis;"><a href="`+activity.resource+`" title="`+activity.resource+`" target="_blank">`+activity.resource+`</a></div>
            `);
            $(".modal-assignment-description").append(`
                <div class="alert alert-green alert-dismissible fade show">
                    <strong>Resources</strong><br>
                    <a href="`+activity.resource+`" target="_blank">`+activity.resource+`</a>
                </div>
            `);
        }
        
    }

    $("#modal-assignment").modal('show');
}